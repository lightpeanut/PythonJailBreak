import ctypes
import os

PTRACE_ATTACH = 16
PTRACE_DETACH = 17
ESRCH = 3  # No such process
EPERM = 1  # Operation not permitted


def main():
    """
    Âú®Ê≤°Êúâ /proc ÁöÑÊÉÖÂÜµ‰∏ãÔºåÈÄöËøáÊö¥ÂäõÁ†¥Ëß£ ptrace Êù•Êâ´ÊèèÂèØÈôÑÂä†ÁöÑ PID„ÄÇ
    """
    report = ["--- ptrace-based PID Scanner Report ---"]
    attachable_pids = []

    try:
        libc = ctypes.CDLL(None)
    except Exception as e:
        return {"result": f"Failed to load libc: {e}"}

    # Êâ´ÊèèÂ∏∏ËßÅÁöÑËøõÁ®ãPIDËåÉÂõ¥
    for pid in range(2, 1025):
        # Â∞ùËØïÈôÑÂä†
        result = libc.ptrace(PTRACE_ATTACH, pid, 0, 0)

        if result == 0:
            # ÊàêÂäüÈôÑÂä†!
            report.append(f"üö® FOUND attachable PID: {pid}")
            attachable_pids.append(pid)

            # **ÈùûÂ∏∏ÈáçË¶Å**: Á´ãÂç≥ÂàÜÁ¶ªÔºåÈÅøÂÖçËÆ©ÁõÆÊ†áËøõÁ®ã‰∏ÄÁõ¥Â§Ñ‰∫éÊöÇÂÅúÁä∂ÊÄÅ
            libc.ptrace(PTRACE_DETACH, pid, 0, 0)
        else:
            # ÈôÑÂä†Â§±Ë¥•ÔºåÊ£ÄÊü•ÂéüÂõ†
            errno = ctypes.get_errno()
            if errno == EPERM:
                # ËøõÁ®ãÂ≠òÂú®Ôºå‰ΩÜÊàë‰ª¨ÊùÉÈôê‰∏çÂ§ü
                # Ëøô‰πüÊòØ‰∏ÄÁßç‰ø°ÊÅØÊ≥ÑÈú≤ÔºåÊàë‰ª¨Áü•ÈÅì‰∫ÜËøô‰∏™PIDÊòØÂ≠òÊ¥ªÁöÑ
                pass  # ÂèØ‰ª•ÈÄâÊã©‰∏çÊä•ÂëäÔºå‰ª•‰øùÊåÅËæìÂá∫ÁÆÄÊ¥Å
            elif errno == ESRCH:
                # ËøõÁ®ã‰∏çÂ≠òÂú®ÔºåËøôÊòØÊúÄÂ∏∏ËßÅÁöÑÊÉÖÂÜµ
                pass

    if attachable_pids:
        report.append(f"\n‚úÖ Summary: Found {len(attachable_pids)} attachable PID(s): {attachable_pids}")
        report.append("    -> You can now use one of these PIDs in the memory read/write script.")
    else:
        report.append("\n‚ùå Summary: No attachable PIDs found in the scanned range (2-1024).")

    return {"result": "\n".join(report)}